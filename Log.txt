
 Executing VASCO........
 Inside doAnalysis...............
 Applying SLIM modeling..............#







 REACHED HERE
 REACHED HERE 1
 Direct Function call...........
 Call Inst Arg is of pointer type.
 Normal arguments in call instr..........

 Inside flagArgs.....
 Inside flagRetArg............
 Return value entered for index = 8





 Printing Global Instruction List.....#
 Index: 1	 Lhs: <y, 1 > 		 Rhs: <a, 1>
 Index: 2	 Lhs: <i1, 1 > 		 Rhs: <y, 1>
 Index: 3 Rhs: <i1, 1>
 Index: 4	 Lhs: <x, 1 > 		 Rhs: <c, 0>
 Index: 5	 Lhs: <i, 1 > 		 Rhs: <x, 1>
 Index: 6	 Lhs: <a, 1 > 		 Rhs: <i, 1>
 Index: 7 Rhs: <fun, 1>
 Index: 8	 Lhs: <call, 1 > 		 Rhs: <i1, 1>
 Index: 9	 Lhs: <z, 1 > 		 Rhs: <call, 1>
 Index: 10 Rhs: <z, 1>
INITIALIZING CONTEXT:-
LABEL: 0
FUNCTION: main
Inflow Value: Forward:- Backward:- {  }
 Inside doAnalysisBackward..................
 Backwards Index: 9
 Backwards Index: 10
===================================[BACKWARD-0 ]===========================================

Processing instruction at INDEX = 10
OUT: {  }
 Inside computeInFromOut...................
 PRinting LOUT of the instr
 Inside printCurrLinLout............
 Rhs in loop: <z, 1>
 Instr is a USE. 
 Instr is a return stmt. IN: { z,  }
===================================[BACKWARD-0 ]===========================================

===================================[BACKWARD-0 ]===========================================

Processing instruction at INDEX = 9
OUT: { z,  }
 Inside computeInFromOut...................
 PRinting LOUT of the instr
 Inside printCurrLinLout............(z, ) 
 Fetched LHS: z lhs indir: 1
 Rhs in loop: <call, 1>IN: { call,  }
===================================[BACKWARD-0 ]===========================================

 Check if LIN of BB has changed.
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............
 Value d2..........
 Inside printCurrLinLout............(call, ) 
LIN value has changed.Pushing predecessors in WL

 Check if LOUT of BB has changed.
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............
 Value d2..........
 Inside printCurrLinLout............
 Inside performMeetBackward...................
 Backwards Index: 6
 Backwards Index: 7
 Backwards Index: 8
===================================[BACKWARD-0 ]===========================================

Processing instruction at INDEX = 8
OUT: { call,  }
 Inside computeInFromOut...................
 PRinting LOUT of the instr
 Inside printCurrLinLout............(call, ) 
 Fetched LHS: call lhs indir: 1
 Rhs in loop: <i1, 1>IN: { i1,  }
===================================[BACKWARD-0 ]===========================================

 CallInflowFunction .............2
 Inside CallInflowFunction...............
 Inside printCurrPinPout............
 Inside printCurrLinLout............(i1, ) 
 Checking backward values first........
 For loop 1
 Bck val is global = i1
 Checking forward values now......
======================================================================================
Context NOT found!!!!!
Forward Inflow Value:- Backward Inflow Value:- { i1,  }
======================================================================================
INITIALIZING CONTEXT:-
LABEL: 1
FUNCTION: fun
Inflow Value: Forward:- Backward:- { i1,  }
===================================[BACKWARD-0 ]===========================================

Processing instruction at INDEX = 6
OUT: { i1,  }
 Inside computeInFromOut...................
 PRinting LOUT of the instr
 Inside printCurrLinLout............(i1, ) 
 Fetched LHS: a lhs indir: 1
 Rhs in loop: <i, 1>IN: { i1,  }
===================================[BACKWARD-0 ]===========================================

 Check if LIN of BB has changed.
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............
 Value d2..........
 Inside printCurrLinLout............(i1, ) 
LIN value has changed.Pushing predecessors in WL

 Check if LOUT of BB has changed.
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............(call, ) 
 Value d2..........
 Inside printCurrLinLout............(call, ) 
 Backwards Index: 1
 Backwards Index: 2
 Backwards Index: 3
===================================[BACKWARD-1 ]===========================================

Processing instruction at INDEX = 3
OUT: { i1,  }
 Inside computeInFromOut...................
 PRinting LOUT of the instr
 Inside printCurrLinLout............(i1, ) 
 Rhs in loop: <i1, 1>
 Instr is a USE. 
 Instr is a return stmt. IN: { i1,  }
===================================[BACKWARD-1 ]===========================================

===================================[BACKWARD-1 ]===========================================

Processing instruction at INDEX = 2
OUT: { i1,  }
 Inside computeInFromOut...................
 PRinting LOUT of the instr
 Inside printCurrLinLout............(i1, ) 
 Fetched LHS: i1 lhs indir: 1
 Rhs in loop: <y, 1>IN: { y,  }
===================================[BACKWARD-1 ]===========================================

===================================[BACKWARD-1 ]===========================================

Processing instruction at INDEX = 1
OUT: { y,  }
 Inside computeInFromOut...................
 PRinting LOUT of the instr
 Inside printCurrLinLout............(y, ) 
 Fetched LHS: y lhs indir: 1
 Rhs in loop: <a, 1>IN: { a,  }
===================================[BACKWARD-1 ]===========================================

 Check if LIN of BB has changed.
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............
 Value d2..........
 Inside printCurrLinLout............(a, ) 
LIN value has changed.Pushing predecessors in WL

 Check if LOUT of BB has changed.
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............(i1, ) 
 Value d2..........
 Inside printCurrLinLout............(i1, ) 
 BB is the entry block..........
 Inside getPurelyGlobalComponentBackward...............
 SLIM LOOP 
 Inserting into the forward worklist
 Inserting into the backward worklist
 Inside performMeetBackward...................
 Backwards Index: 6
 Backwards Index: 7
 Backwards Index: 8
===================================[BACKWARD-0 ]===========================================

Processing instruction at INDEX = 8
OUT: { call,  }
 Inside computeInFromOut...................
 PRinting LOUT of the instr
 Inside printCurrLinLout............(call, ) 
 Fetched LHS: call lhs indir: 1
 Rhs in loop: <i1, 1>IN: { i1,  }
===================================[BACKWARD-0 ]===========================================

 CallInflowFunction .............2
 Inside CallInflowFunction...............
 Inside printCurrPinPout............
 Inside printCurrLinLout............(i1, ) 
 Checking backward values first........
 For loop 1
 Bck val is global = i1
 Checking forward values now......
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............
 Value d2..........
 Inside printCurrPinPout............
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............(i1, ) 
 Value d2..........
 Inside printCurrLinLout............(i1, ) ======================================================================================
Context found!!!!!
LABEL: 1
Forward Inflow Value:- Backward Inflow Value:- { i1,  }======================================================================================

===================================[BACKWARD-0 ]===========================================

Processing instruction at INDEX = 7
OUT: { i1,  }
 Inside CallOutflowFunction..............
 Printing values of a1
 Inside printCurrPinPout............
 Printing values of d1
 Inside printCurrLinLout............(i1, ) 
 Printing values of a3
 Inside printCurrPinPout............
 Printing values of d3
 Inside printCurrLinLout............(a, ) 
 Inside getLocalComponentB.............
 Inside performMeetBackward...................IN: { a,  }
===================================[BACKWARD-0 ]===========================================

===================================[BACKWARD-0 ]===========================================

Processing instruction at INDEX = 6
OUT: { a,  }
 Inside computeInFromOut...................
 PRinting LOUT of the instr
 Inside printCurrLinLout............(a, ) 
 Fetched LHS: a lhs indir: 1
 Rhs in loop: <i, 1>IN: { i,  }
===================================[BACKWARD-0 ]===========================================

 Check if LIN of BB has changed.
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............(i1, ) 
 Value d2..........
 Inside printCurrLinLout............(i, ) 
LIN value has changed.Pushing predecessors in WL

 Check if LOUT of BB has changed.
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............(call, ) 
 Value d2..........
 Inside printCurrLinLout............(call, ) 
 Inside performMeetBackward...................
 Backwards Index: 4
 Backwards Index: 5
===================================[BACKWARD-0 ]===========================================

Processing instruction at INDEX = 5
OUT: { i,  }
 Inside computeInFromOut...................
 PRinting LOUT of the instr
 Inside printCurrLinLout............(i, ) 
 Fetched LHS: i lhs indir: 1
 Rhs in loop: <x, 1>IN: { x,  }
===================================[BACKWARD-0 ]===========================================

===================================[BACKWARD-0 ]===========================================

Processing instruction at INDEX = 4
OUT: { x,  }
 Inside computeInFromOut...................
 PRinting LOUT of the instr
 Inside printCurrLinLout............(x, ) 
 Fetched LHS: x lhs indir: 1
 Rhs in loop: <c, 0>IN: {  }
===================================[BACKWARD-0 ]===========================================

 Check if LIN of BB has changed.
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............
 Value d2..........
 Inside printCurrLinLout............
 Check if LOUT of BB has changed.
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............(i, ) 
 Value d2..........
 Inside printCurrLinLout............(i, ) 
 BB is the entry block..........
 Inside getPurelyGlobalComponentBackward...............
 SLIM LOOP 
 Inside doAnalysisForward.................
 Forward Index: 1
 Forward Index: 2
 Forward Index: 3
 Index = 1
===================================[FORWARD-1 ]===========================================

Processing instruction at INDEX = 1
IN: 
 Inside computeOutFromIn......................
 LHS in loop = y indir= 1
 Rhs in loop: <a, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 Value: y
 ----------------------
 Normal instruction. 
 Rhs Value: a indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 Now fetching the pointees of LHS: y
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............
 Printing backwardOUT value Val: y 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: 
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............OUT: 
===================================[FORWARD-1 ]===========================================

 Index = 2
===================================[FORWARD-1 ]===========================================

Processing instruction at INDEX = 2
IN: 
 Inside computeOutFromIn......................
 LHS in loop = i1 indir= 1
 Rhs in loop: <y, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 Value: i1
 ----------------------
 Normal instruction. 
 Rhs Value: y indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 Now fetching the pointees of LHS: i1
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............
 Printing backwardOUT value Val: i1 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: 
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............OUT: 
===================================[FORWARD-1 ]===========================================

 Index = 3
===================================[FORWARD-1 ]===========================================

Processing instruction at INDEX = 3
IN: 
 Inside computeOutFromIn......................
 Rhs in loop: <i1, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 Value: i1
 ----------------------
 Instr is a USE. 
 Inside restrictByLivness().......
 Printing forward values: 
 ----------------------------------OUT: 
===================================[FORWARD-1 ]===========================================

 Index = 1
===================================[FORWARD-1 ]===========================================

Processing instruction at INDEX = 1
IN: 
 Inside computeOutFromIn......................
 LHS in loop = y indir= 1
 Rhs in loop: <a, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 Value: y
 ----------------------
 Normal instruction. 
 Rhs Value: a indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 Now fetching the pointees of LHS: y
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............
 Printing backwardOUT value Val: y 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: 
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............OUT: 
===================================[FORWARD-1 ]===========================================

 Index = 2
===================================[FORWARD-1 ]===========================================

Processing instruction at INDEX = 2
IN: 
 Inside computeOutFromIn......................
 LHS in loop = i1 indir= 1
 Rhs in loop: <y, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 Value: i1
 ----------------------
 Normal instruction. 
 Rhs Value: y indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 Now fetching the pointees of LHS: i1
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............
 Printing backwardOUT value Val: i1 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: 
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............OUT: 
===================================[FORWARD-1 ]===========================================

 Index = 3
===================================[FORWARD-1 ]===========================================

Processing instruction at INDEX = 3
IN: 
 Inside computeOutFromIn......................
 Rhs in loop: <i1, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 Value: i1
 ----------------------
 Instr is a USE. 
 Inside restrictByLivness().......
 Printing forward values: 
 ----------------------------------OUT: 
===================================[FORWARD-1 ]===========================================

 Check if POut has changed
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............
 Value d2..........
 Inside printCurrPinPout............
 Check if PIN has changed
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............
 Value d2..........
 Inside printCurrPinPout............
 BB is the last node....
 Inside getPurelyGlobalComponentForward...........
 Inside SLIM loop 
 Inserting into forward worklist......
 Inserting into backwards worklist...
 Forward Index: 4
 Forward Index: 5
 Index = 4
===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 4
IN: 
 Inside computeOutFromIn......................
 LHS in loop = x indir= 1
 Rhs in loop: <c, 0>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 Value: x
 ----------------------
 Normal instruction. 
 Rhs Value: c indir= 0
 Rhs indir = 0 
 Now fetching the pointees of LHS: x
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............{ (x, )->((c, ) , ) }
 Printing backwardOUT value Val: x 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: { (x, )->((c, ) , ) }
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............{ (x, )->((c, ) , ) }OUT: { (x, )->((c, ) , ) }
===================================[FORWARD-0 ]===========================================

 Index = 5
===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 5
IN: { (x, )->((c, ) , ) }
 Inside computeOutFromIn......................
 LHS in loop = i indir= 1
 Rhs in loop: <x, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 Value: i
 ----------------------
 Normal instruction. 
 Rhs Value: x indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 PIN is not empty
 Pointees of Rhs found in Pin. 
 Second while loop
 Verify pointee of rhs: c
 Now fetching the pointees of LHS: i
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............{ (x, )->((c, ) , ) }{ (i, )->((c, ) , ) }
 Printing backwardOUT value Val: i 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: { (x, )->((c, ) , ) }{ (i, )->((c, ) , ) }
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............{ (i, )->((c, ) , ) }OUT: { (i, )->((c, ) , ) }
===================================[FORWARD-0 ]===========================================

 Index = 4
===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 4
IN: 
 Inside computeOutFromIn......................
 LHS in loop = x indir= 1
 Rhs in loop: <c, 0>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............{ (x, )->((c, ) , ) }
 Checking backwardOUT values........
 Value: x
 ----------------------
 Normal instruction. 
 Rhs Value: c indir= 0
 Rhs indir = 0 
 Now fetching the pointees of LHS: x
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............{ (x, )->((c, ) , ) }
 Printing backwardOUT value Val: x 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: { (x, )->((c, ) , ) }
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............{ (x, )->((c, ) , ) }OUT: { (x, )->((c, ) , ) }
===================================[FORWARD-0 ]===========================================

 Index = 5
===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 5
IN: { (x, )->((c, ) , ) }
 Inside computeOutFromIn......................
 LHS in loop = i indir= 1
 Rhs in loop: <x, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............{ (i, )->((c, ) , ) }
 Checking backwardOUT values........
 Value: i
 ----------------------
 Normal instruction. 
 Rhs Value: x indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 PIN is not empty
 Pointees of Rhs found in Pin. 
 Second while loop
 Verify pointee of rhs: c
 Now fetching the pointees of LHS: i
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............{ (x, )->((c, ) , ) }{ (i, )->((c, ) , ) }
 Printing backwardOUT value Val: i 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: { (x, )->((c, ) , ) }{ (i, )->((c, ) , ) }
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............{ (i, )->((c, ) , ) }OUT: { (i, )->((c, ) , ) }
===================================[FORWARD-0 ]===========================================
{ (i, )->((c, ) , ) }
 Check if POut has changed
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............
 Value d2..........
 Inside printCurrPinPout............{ (i, )->((c, ) , ) }
 POUT value has changed. Insert succ into fWL 
 Check if PIN has changed
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............
 Value d2..........
 Inside printCurrPinPout............
 Inside performMeetForward..............
 Forward Index: 6
 Forward Index: 7
 Forward Index: 8
===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 6
IN: { (i, )->((c, ) , ) }
 Inside computeOutFromIn......................
 LHS in loop = a indir= 1
 Rhs in loop: <i, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 Value: a
 ----------------------
 Normal instruction. 
 Rhs Value: i indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 PIN is not empty
 Pointees of Rhs found in Pin. 
 Second while loop
 Verify pointee of rhs: c
 Now fetching the pointees of LHS: a
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............{ (a, )->((c, ) , ) }{ (i, )->((c, ) , ) }
 Printing backwardOUT value Val: a 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: { (a, )->((c, ) , ) }{ (i, )->((c, ) , ) }
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }OUT: { (a, )->((c, ) , ) }
 Backward value is : { a,  }
===================================[FORWARD-0 ]===========================================

 Inside CallInflowFunction...............
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Inside printCurrLinLout............(i1, ) 
 Checking backward values first........
 For loop 1
 Bck val is global = i1
 Checking forward values now......
 Ptr is global: : a
 Checking Pointeess....
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Value d2..........
 Inside printCurrPinPout............
======================================================================================
Context NOT found!!!!!
Forward Inflow Value:- { (a, )->((c, ) , ) }Backward Inflow Value:- { i1,  }
======================================================================================
INITIALIZING CONTEXT:-
LABEL: 2
FUNCTION: fun
Inflow Value: Forward:- { (a, )->((c, ) , ) }Backward:- { i1,  }
 Inside doAnalysisForward.................
 Forward Index: 1
 Forward Index: 2
 Forward Index: 3
 Index = 1
===================================[FORWARD-2 ]===========================================

Processing instruction at INDEX = 1
IN: { (a, )->((c, ) , ) }
 Inside computeOutFromIn......................
 LHS in loop = y indir= 1
 Rhs in loop: <a, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 BackwardOUT is empty.............
 ----------------------
 Normal instruction. 
 Rhs Value: a indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 PIN is not empty
 Pointees of Rhs found in Pin. 
 Second while loop
 Verify pointee of rhs: c
 Now fetching the pointees of LHS: y
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............{ (y, )->((c, ) , ) }{ (a, )->((c, ) , ) }
 Printing backwardOUT value

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: { (y, )->((c, ) , ) }{ (a, )->((c, ) , ) }
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............OUT: 
===================================[FORWARD-2 ]===========================================

 Index = 2
===================================[FORWARD-2 ]===========================================

Processing instruction at INDEX = 2
IN: 
 Inside computeOutFromIn......................
 LHS in loop = i1 indir= 1
 Rhs in loop: <y, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 BackwardOUT is empty.............
 ----------------------
 Normal instruction. 
 Rhs Value: y indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 Now fetching the pointees of LHS: i1
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............
 Printing backwardOUT value

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: 
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............OUT: 
===================================[FORWARD-2 ]===========================================

 Index = 3
===================================[FORWARD-2 ]===========================================

Processing instruction at INDEX = 3
IN: 
 Inside computeOutFromIn......................
 Rhs in loop: <i1, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 Value: i1
 ----------------------
 Instr is a USE. 
 Inside restrictByLivness().......
 Printing forward values: 
 ----------------------------------OUT: 
===================================[FORWARD-2 ]===========================================

 Index = 1
===================================[FORWARD-2 ]===========================================

Processing instruction at INDEX = 1
IN: { (a, )->((c, ) , ) }
 Inside computeOutFromIn......................
 LHS in loop = y indir= 1
 Rhs in loop: <a, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 BackwardOUT is empty.............
 ----------------------
 Normal instruction. 
 Rhs Value: a indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 PIN is not empty
 Pointees of Rhs found in Pin. 
 Second while loop
 Verify pointee of rhs: c
 Now fetching the pointees of LHS: y
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............{ (y, )->((c, ) , ) }{ (a, )->((c, ) , ) }
 Printing backwardOUT value

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: { (y, )->((c, ) , ) }{ (a, )->((c, ) , ) }
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............OUT: 
===================================[FORWARD-2 ]===========================================

 Index = 2
===================================[FORWARD-2 ]===========================================

Processing instruction at INDEX = 2
IN: 
 Inside computeOutFromIn......................
 LHS in loop = i1 indir= 1
 Rhs in loop: <y, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 BackwardOUT is empty.............
 ----------------------
 Normal instruction. 
 Rhs Value: y indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 Now fetching the pointees of LHS: i1
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............
 Printing backwardOUT value

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: 
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............OUT: 
===================================[FORWARD-2 ]===========================================

 Index = 3
===================================[FORWARD-2 ]===========================================

Processing instruction at INDEX = 3
IN: 
 Inside computeOutFromIn......................
 Rhs in loop: <i1, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 Value: i1
 ----------------------
 Instr is a USE. 
 Inside restrictByLivness().......
 Printing forward values: 
 ----------------------------------OUT: 
===================================[FORWARD-2 ]===========================================

 Check if POut has changed
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............
 Value d2..........
 Inside printCurrPinPout............
 Check if PIN has changed
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Value d2..........
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 BB is the last node....
 Inside getPurelyGlobalComponentForward...........
 Inside SLIM loop 
 Inserting into forward worklist......
 Inserting into backwards worklist...
 Inside performMeetForward..............
 Forward Index: 6
 Forward Index: 7
 Forward Index: 8
===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 6
IN: { (i, )->((c, ) , ) }
 Inside computeOutFromIn......................
 LHS in loop = a indir= 1
 Rhs in loop: <i, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Checking backwardOUT values........
 Value: a
 ----------------------
 Normal instruction. 
 Rhs Value: i indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 PIN is not empty
 Pointees of Rhs found in Pin. 
 Second while loop
 Verify pointee of rhs: c
 Now fetching the pointees of LHS: a
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............{ (a, )->((c, ) , ) }{ (i, )->((c, ) , ) }
 Printing backwardOUT value Val: a 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: { (a, )->((c, ) , ) }{ (i, )->((c, ) , ) }
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }OUT: { (a, )->((c, ) , ) }
 Backward value is : { a,  }
===================================[FORWARD-0 ]===========================================

 Inside CallInflowFunction...............
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Inside printCurrLinLout............(i1, ) 
 Checking backward values first........
 For loop 1
 Bck val is global = i1
 Checking forward values now......
 Ptr is global: : a
 Checking Pointeess....
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Value d2..........
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............(i1, ) 
 Value d2..........
 Inside printCurrLinLout............(i1, ) ======================================================================================
Context found!!!!!
LABEL: 2
Forward Inflow Value:- { (a, )->((c, ) , ) }Backward Inflow Value:- { i1,  }======================================================================================

===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 7
IN: { (a, )->((c, ) , ) }
 Inside CallOutflowFunction..............
 Printing values of a1
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Printing values of d1
 Inside printCurrLinLout............(i1, ) 
 Printing values of a3
 Inside printCurrPinPout............
 Printing values of d3
 Inside printCurrLinLout............
 Inside getLocalComponentB.............
 Inside getPurelyLocalComponentForward.............
 Inside performMeetForward..............
 Inside performMeetForward..............OUT: 
===================================[FORWARD-0 ]===========================================

===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 8
IN: 
 Inside computeOutFromIn......................
 LHS in loop = call indir= 1
 Rhs in loop: <i1, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 Value: call
 ----------------------
 Normal instruction. 
 Rhs Value: i1 indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 Now fetching the pointees of LHS: call
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............
 Printing backwardOUT value Val: call 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: 
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............OUT: 
 Backward value is : { call,  }
===================================[FORWARD-0 ]===========================================

 Check if POut has changed
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Value d2..........
 Inside printCurrPinPout............
 POUT value has changed. Insert succ into fWL 
 Check if PIN has changed
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............{ (i, )->((c, ) , ) }
 Value d2..........
 Inside printCurrPinPout............{ (i, )->((c, ) , ) }
 Inside performMeetForward..............
 Forward Index: 9
 Forward Index: 10
 Index = 9
===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 9
IN: 
 Inside computeOutFromIn......................
 LHS in loop = z indir= 1
 Rhs in loop: <call, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 Value: z
 ----------------------
 Normal instruction. 
 Rhs Value: call indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 Now fetching the pointees of LHS: z
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............
 Printing backwardOUT value Val: z 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: 
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............OUT: 
===================================[FORWARD-0 ]===========================================

 Index = 10
===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 10
IN: 
 Inside computeOutFromIn......................
 Rhs in loop: <z, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 BackwardOUT is empty.............
 ----------------------
 Instr is a USE. 
 Inside restrictByLivness().......
 Printing forward values: 
 ----------------------------------OUT: 
===================================[FORWARD-0 ]===========================================

 Index = 9
===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 9
IN: 
 Inside computeOutFromIn......................
 LHS in loop = z indir= 1
 Rhs in loop: <call, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 Value: z
 ----------------------
 Normal instruction. 
 Rhs Value: call indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 Now fetching the pointees of LHS: z
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............
 Printing backwardOUT value Val: z 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: 
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............OUT: 
===================================[FORWARD-0 ]===========================================

 Index = 10
===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 10
IN: 
 Inside computeOutFromIn......................
 Rhs in loop: <z, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 BackwardOUT is empty.............
 ----------------------
 Instr is a USE. 
 Inside restrictByLivness().......
 Printing forward values: 
 ----------------------------------OUT: 
===================================[FORWARD-0 ]===========================================

 Check if POut has changed
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............
 Value d2..........
 Inside printCurrPinPout............
 Check if PIN has changed
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............
 Value d2..........
 Inside printCurrPinPout............
 BB is the last node....
 Inside getPurelyGlobalComponentForward...........
 Inside SLIM loop 
 Inside doAnalysisBackward..................
 Backwards Index: 1
 Backwards Index: 2
 Backwards Index: 3
===================================[BACKWARD-2 ]===========================================

Processing instruction at INDEX = 3
OUT: { i1,  }
 Inside computeInFromOut...................
 PRinting LOUT of the instr
 Inside printCurrLinLout............(i1, ) 
 Rhs in loop: <i1, 1>
 Instr is a USE. 
 Instr is a return stmt. IN: { i1,  }
===================================[BACKWARD-2 ]===========================================

===================================[BACKWARD-2 ]===========================================

Processing instruction at INDEX = 2
OUT: { i1,  }
 Inside computeInFromOut...................
 PRinting LOUT of the instr
 Inside printCurrLinLout............(i1, ) 
 Fetched LHS: i1 lhs indir: 1
 Rhs in loop: <y, 1>IN: { y,  }
===================================[BACKWARD-2 ]===========================================

===================================[BACKWARD-2 ]===========================================

Processing instruction at INDEX = 1
OUT: { y,  }
 Inside computeInFromOut...................
 PRinting LOUT of the instr
 Inside printCurrLinLout............(y, ) 
 Fetched LHS: y lhs indir: 1
 Rhs in loop: <a, 1>IN: { a,  }
===================================[BACKWARD-2 ]===========================================

 Check if LIN of BB has changed.
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............
 Value d2..........
 Inside printCurrLinLout............(a, ) 
LIN value has changed.Pushing predecessors in WL

 Check if LOUT of BB has changed.
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............(i1, ) 
 Value d2..........
 Inside printCurrLinLout............(i1, ) 
 BB is the entry block..........
 Inside getPurelyGlobalComponentBackward...............
 SLIM LOOP 
 Inserting into the forward worklist
 Inserting into the backward worklist
 Inside performMeetBackward...................
 Backwards Index: 6
 Backwards Index: 7
 Backwards Index: 8
===================================[BACKWARD-0 ]===========================================

Processing instruction at INDEX = 8
OUT: { call,  }
 Inside computeInFromOut...................
 PRinting LOUT of the instr
 Inside printCurrLinLout............(call, ) 
 Fetched LHS: call lhs indir: 1
 Rhs in loop: <i1, 1>IN: { i1,  }
===================================[BACKWARD-0 ]===========================================

 CallInflowFunction .............2
 Inside CallInflowFunction...............
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Inside printCurrLinLout............(i1, ) 
 Checking backward values first........
 For loop 1
 Bck val is global = i1
 Checking forward values now......
 Ptr is global: : a
 Checking Pointeess....
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Value d2..........
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............(i1, ) 
 Value d2..........
 Inside printCurrLinLout............(i1, ) ======================================================================================
Context found!!!!!
LABEL: 2
Forward Inflow Value:- { (a, )->((c, ) , ) }Backward Inflow Value:- { i1,  }======================================================================================

===================================[BACKWARD-0 ]===========================================

Processing instruction at INDEX = 7
OUT: { i1,  }
 Inside CallOutflowFunction..............
 Printing values of a1
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Printing values of d1
 Inside printCurrLinLout............(i1, ) 
 Printing values of a3
 Inside printCurrPinPout............
 Printing values of d3
 Inside printCurrLinLout............(a, ) 
 Inside getLocalComponentB.............
 Inside performMeetBackward...................IN: { a,  }
===================================[BACKWARD-0 ]===========================================

===================================[BACKWARD-0 ]===========================================

Processing instruction at INDEX = 6
OUT: { a,  }
 Inside computeInFromOut...................
 PRinting LOUT of the instr
 Inside printCurrLinLout............(a, ) 
 Fetched LHS: a lhs indir: 1
 Rhs in loop: <i, 1>IN: { i,  }
===================================[BACKWARD-0 ]===========================================

 Check if LIN of BB has changed.
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............(i, ) 
 Value d2..........
 Inside printCurrLinLout............(i, ) 
 Check if LOUT of BB has changed.
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............(call, ) 
 Value d2..........
 Inside printCurrLinLout............(call, ) 
 Inside doAnalysisForward.................
 Inside performMeetForward..............
 Forward Index: 6
 Forward Index: 7
 Forward Index: 8
===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 6
IN: { (i, )->((c, ) , ) }
 Inside computeOutFromIn......................
 LHS in loop = a indir= 1
 Rhs in loop: <i, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Checking backwardOUT values........
 Value: a
 ----------------------
 Normal instruction. 
 Rhs Value: i indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 PIN is not empty
 Pointees of Rhs found in Pin. 
 Second while loop
 Verify pointee of rhs: c
 Now fetching the pointees of LHS: a
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............{ (a, )->((c, ) , ) }{ (i, )->((c, ) , ) }
 Printing backwardOUT value Val: a 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: { (a, )->((c, ) , ) }{ (i, )->((c, ) , ) }
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }OUT: { (a, )->((c, ) , ) }
 Backward value is : { a,  }
===================================[FORWARD-0 ]===========================================

 Inside CallInflowFunction...............
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Inside printCurrLinLout............(i1, ) 
 Checking backward values first........
 For loop 1
 Bck val is global = i1
 Checking forward values now......
 Ptr is global: : a
 Checking Pointeess....
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Value d2..........
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............(i1, ) 
 Value d2..........
 Inside printCurrLinLout............(i1, ) ======================================================================================
Context found!!!!!
LABEL: 2
Forward Inflow Value:- { (a, )->((c, ) , ) }Backward Inflow Value:- { i1,  }======================================================================================

===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 7
IN: { (a, )->((c, ) , ) }
 Inside CallOutflowFunction..............
 Printing values of a1
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Printing values of d1
 Inside printCurrLinLout............(i1, ) 
 Printing values of a3
 Inside printCurrPinPout............
 Printing values of d3
 Inside printCurrLinLout............(a, ) 
 Inside getLocalComponentB.............
 Inside getPurelyLocalComponentForward.............
 Inside performMeetForward..............
 Inside performMeetForward..............OUT: 
===================================[FORWARD-0 ]===========================================

===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 8
IN: 
 Inside computeOutFromIn......................
 LHS in loop = call indir= 1
 Rhs in loop: <i1, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 Value: call
 ----------------------
 Normal instruction. 
 Rhs Value: i1 indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 Now fetching the pointees of LHS: call
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............
 Printing backwardOUT value Val: call 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: 
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............OUT: 
 Backward value is : { call,  }
===================================[FORWARD-0 ]===========================================

 Check if POut has changed
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............
 Value d2..........
 Inside printCurrPinPout............
 Check if PIN has changed
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............{ (i, )->((c, ) , ) }
 Value d2..........
 Inside printCurrPinPout............{ (i, )->((c, ) , ) }
 Forward Index: 1
 Forward Index: 2
 Forward Index: 3
 Index = 1
===================================[FORWARD-2 ]===========================================

Processing instruction at INDEX = 1
IN: { (a, )->((c, ) , ) }
 Inside computeOutFromIn......................
 LHS in loop = y indir= 1
 Rhs in loop: <a, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 Value: y
 ----------------------
 Normal instruction. 
 Rhs Value: a indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 PIN is not empty
 Pointees of Rhs found in Pin. 
 Second while loop
 Verify pointee of rhs: c
 Now fetching the pointees of LHS: y
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............{ (y, )->((c, ) , ) }{ (a, )->((c, ) , ) }
 Printing backwardOUT value Val: y 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: { (y, )->((c, ) , ) }{ (a, )->((c, ) , ) }
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............{ (y, )->((c, ) , ) }OUT: { (y, )->((c, ) , ) }
===================================[FORWARD-2 ]===========================================

 Index = 2
===================================[FORWARD-2 ]===========================================

Processing instruction at INDEX = 2
IN: { (y, )->((c, ) , ) }
 Inside computeOutFromIn......................
 LHS in loop = i1 indir= 1
 Rhs in loop: <y, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 Value: i1
 ----------------------
 Normal instruction. 
 Rhs Value: y indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 PIN is not empty
 Pointees of Rhs found in Pin. 
 Second while loop
 Verify pointee of rhs: c
 Now fetching the pointees of LHS: i1
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............{ (i1, )->((c, ) , ) }{ (y, )->((c, ) , ) }
 Printing backwardOUT value Val: i1 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: { (i1, )->((c, ) , ) }{ (y, )->((c, ) , ) }
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............{ (i1, )->((c, ) , ) }OUT: { (i1, )->((c, ) , ) }
===================================[FORWARD-2 ]===========================================

 Index = 3
===================================[FORWARD-2 ]===========================================

Processing instruction at INDEX = 3
IN: { (i1, )->((c, ) , ) }
 Inside computeOutFromIn......................
 Rhs in loop: <i1, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 Value: i1
 ----------------------
 Instr is a USE. 
 Inside restrictByLivness().......
 Printing forward values: { (i1, )->((c, ) , ) }
 ----------------------------------OUT: { (i1, )->((c, ) , ) }
===================================[FORWARD-2 ]===========================================

 Index = 1
===================================[FORWARD-2 ]===========================================

Processing instruction at INDEX = 1
IN: { (a, )->((c, ) , ) }
 Inside computeOutFromIn......................
 LHS in loop = y indir= 1
 Rhs in loop: <a, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............{ (y, )->((c, ) , ) }
 Checking backwardOUT values........
 Value: y
 ----------------------
 Normal instruction. 
 Rhs Value: a indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 PIN is not empty
 Pointees of Rhs found in Pin. 
 Second while loop
 Verify pointee of rhs: c
 Now fetching the pointees of LHS: y
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............{ (y, )->((c, ) , ) }{ (a, )->((c, ) , ) }
 Printing backwardOUT value Val: y 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: { (y, )->((c, ) , ) }{ (a, )->((c, ) , ) }
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............{ (y, )->((c, ) , ) }OUT: { (y, )->((c, ) , ) }
===================================[FORWARD-2 ]===========================================

 Index = 2
===================================[FORWARD-2 ]===========================================

Processing instruction at INDEX = 2
IN: { (y, )->((c, ) , ) }
 Inside computeOutFromIn......................
 LHS in loop = i1 indir= 1
 Rhs in loop: <y, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............{ (i1, )->((c, ) , ) }
 Checking backwardOUT values........
 Value: i1
 ----------------------
 Normal instruction. 
 Rhs Value: y indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 PIN is not empty
 Pointees of Rhs found in Pin. 
 Second while loop
 Verify pointee of rhs: c
 Now fetching the pointees of LHS: i1
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............{ (i1, )->((c, ) , ) }{ (y, )->((c, ) , ) }
 Printing backwardOUT value Val: i1 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: { (i1, )->((c, ) , ) }{ (y, )->((c, ) , ) }
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............{ (i1, )->((c, ) , ) }OUT: { (i1, )->((c, ) , ) }
===================================[FORWARD-2 ]===========================================

 Index = 3
===================================[FORWARD-2 ]===========================================

Processing instruction at INDEX = 3
IN: { (i1, )->((c, ) , ) }
 Inside computeOutFromIn......................
 Rhs in loop: <i1, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............{ (i1, )->((c, ) , ) }
 Checking backwardOUT values........
 Value: i1
 ----------------------
 Instr is a USE. 
 Inside restrictByLivness().......
 Printing forward values: { (i1, )->((c, ) , ) }
 ----------------------------------OUT: { (i1, )->((c, ) , ) }
===================================[FORWARD-2 ]===========================================
{ (i1, )->((c, ) , ) }
 Check if POut has changed
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............
 Value d2..........
 Inside printCurrPinPout............{ (i1, )->((c, ) , ) }
 POUT value has changed. Insert succ into fWL 
 Check if PIN has changed
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Value d2..........
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 BB is the last node....
 Inside getPurelyGlobalComponentForward...........
 Inside SLIM loop 
 Inserting into forward worklist......
 Inserting into backwards worklist...
 Inside performMeetForward..............
 Forward Index: 6
 Forward Index: 7
 Forward Index: 8
===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 6
IN: { (i, )->((c, ) , ) }
 Inside computeOutFromIn......................
 LHS in loop = a indir= 1
 Rhs in loop: <i, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Checking backwardOUT values........
 Value: a
 ----------------------
 Normal instruction. 
 Rhs Value: i indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 PIN is not empty
 Pointees of Rhs found in Pin. 
 Second while loop
 Verify pointee of rhs: c
 Now fetching the pointees of LHS: a
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............{ (a, )->((c, ) , ) }{ (i, )->((c, ) , ) }
 Printing backwardOUT value Val: a 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: { (a, )->((c, ) , ) }{ (i, )->((c, ) , ) }
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }OUT: { (a, )->((c, ) , ) }
 Backward value is : { a,  }
===================================[FORWARD-0 ]===========================================

 Inside CallInflowFunction...............
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Inside printCurrLinLout............(i1, ) 
 Checking backward values first........
 For loop 1
 Bck val is global = i1
 Checking forward values now......
 Ptr is global: : a
 Checking Pointeess....
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Value d2..........
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............(i1, ) 
 Value d2..........
 Inside printCurrLinLout............(i1, ) ======================================================================================
Context found!!!!!
LABEL: 2
Forward Inflow Value:- { (a, )->((c, ) , ) }Backward Inflow Value:- { i1,  }======================================================================================

===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 7
IN: { (a, )->((c, ) , ) }
 Inside CallOutflowFunction..............
 Printing values of a1
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Printing values of d1
 Inside printCurrLinLout............(i1, ) 
 Printing values of a3
 Inside printCurrPinPout............{ (i1, )->((c, ) , ) }
 Printing values of d3
 Inside printCurrLinLout............(a, ) 
 Inside getLocalComponentB.............
 Inside getPurelyLocalComponentForward.............
 Inside performMeetForward..............
 Inside performMeetForward..............OUT: { (i1, )->((c, ) , ) }
===================================[FORWARD-0 ]===========================================

===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 8
IN: { (i1, )->((c, ) , ) }
 Inside computeOutFromIn......................
 LHS in loop = call indir= 1
 Rhs in loop: <i1, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............{ (i1, )->((c, ) , ) }
 Checking backwardOUT values........
 Value: call
 ----------------------
 Normal instruction. 
 Rhs Value: i1 indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 PIN is not empty
 Pointees of Rhs found in Pin. 
 Second while loop
 Verify pointee of rhs: c
 Now fetching the pointees of LHS: call
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............{ (i1, )->((c, ) , ) }{ (call, )->((c, ) , ) }
 Printing backwardOUT value Val: call 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: { (i1, )->((c, ) , ) }{ (call, )->((c, ) , ) }
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............{ (call, )->((c, ) , ) }OUT: { (call, )->((c, ) , ) }
 Backward value is : { call,  }
===================================[FORWARD-0 ]===========================================

 Check if POut has changed
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............
 Value d2..........
 Inside printCurrPinPout............{ (call, )->((c, ) , ) }
 POUT value has changed. Insert succ into fWL 
 Check if PIN has changed
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............{ (i, )->((c, ) , ) }
 Value d2..........
 Inside printCurrPinPout............{ (i, )->((c, ) , ) }
 Inside performMeetForward..............
 Forward Index: 9
 Forward Index: 10
 Index = 9
===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 9
IN: { (call, )->((c, ) , ) }
 Inside computeOutFromIn......................
 LHS in loop = z indir= 1
 Rhs in loop: <call, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 Value: z
 ----------------------
 Normal instruction. 
 Rhs Value: call indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 PIN is not empty
 Pointees of Rhs found in Pin. 
 Second while loop
 Verify pointee of rhs: c
 Now fetching the pointees of LHS: z
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............{ (call, )->((c, ) , ) }{ (z, )->((c, ) , ) }
 Printing backwardOUT value Val: z 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: { (call, )->((c, ) , ) }{ (z, )->((c, ) , ) }
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............{ (z, )->((c, ) , ) }OUT: { (z, )->((c, ) , ) }
===================================[FORWARD-0 ]===========================================

 Index = 10
===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 10
IN: { (z, )->((c, ) , ) }
 Inside computeOutFromIn......................
 Rhs in loop: <z, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 BackwardOUT is empty.............
 ----------------------
 Instr is a USE. 
 Inside restrictByLivness().......
 Printing forward values: 
 ----------------------------------OUT: 
===================================[FORWARD-0 ]===========================================

 Index = 9
===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 9
IN: { (call, )->((c, ) , ) }
 Inside computeOutFromIn......................
 LHS in loop = z indir= 1
 Rhs in loop: <call, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............{ (z, )->((c, ) , ) }
 Checking backwardOUT values........
 Value: z
 ----------------------
 Normal instruction. 
 Rhs Value: call indir= 1
 case 2: x=t1 or t1=x or *t2=t1 
 While loop rhsIndir is 1Rhs value is a pointer
 Fetch pointees of t1 from Pin. 
 RhsValue is not an array
 PIN is not empty
 Pointees of Rhs found in Pin. 
 Second while loop
 Verify pointee of rhs: c
 Now fetching the pointees of LHS: z
 Inside while loop for Lhs
 Must points-to relation. Delete points-to pairs from OutofInst 

 Inside printCurrPinPout............{ (call, )->((c, ) , ) }{ (z, )->((c, ) , ) }
 Printing backwardOUT value Val: z 	

 Merging prev and curr POUT values
 Inside forwardMerge.................
 Printing forward values: { (call, )->((c, ) , ) }{ (z, )->((c, ) , ) }
 ----------------------------------
 Inside restrictByLivness().......
 Printing new POUT after restrictByLvness
 Inside printCurrPinPout............{ (z, )->((c, ) , ) }OUT: { (z, )->((c, ) , ) }
===================================[FORWARD-0 ]===========================================

 Index = 10
===================================[FORWARD-0 ]===========================================

Processing instruction at INDEX = 10
IN: { (z, )->((c, ) , ) }
 Inside computeOutFromIn......................
 Rhs in loop: <z, 1>
 Forward Component at OUT  ....previos component
 Inside printCurrPinPout............
 Checking backwardOUT values........
 BackwardOUT is empty.............
 ----------------------
 Instr is a USE. 
 Inside restrictByLivness().......
 Printing forward values: 
 ----------------------------------OUT: 
===================================[FORWARD-0 ]===========================================

 Check if POut has changed
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............
 Value d2..........
 Inside printCurrPinPout............
 Check if PIN has changed
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............{ (call, )->((c, ) , ) }
 Value d2..........
 Inside printCurrPinPout............{ (call, )->((c, ) , ) }
 BB is the last node....
 Inside getPurelyGlobalComponentForward...........
 Inside SLIM loop 
 Inside doAnalysisBackward..................
 Inside performMeetBackward...................
 Backwards Index: 6
 Backwards Index: 7
 Backwards Index: 8
===================================[BACKWARD-0 ]===========================================

Processing instruction at INDEX = 8
OUT: { call,  }
 Inside computeInFromOut...................
 PRinting LOUT of the instr
 Inside printCurrLinLout............(call, ) 
 Fetched LHS: call lhs indir: 1
 Rhs in loop: <i1, 1>IN: { i1,  }
===================================[BACKWARD-0 ]===========================================

 CallInflowFunction .............2
 Inside CallInflowFunction...............
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Inside printCurrLinLout............(i1, ) 
 Checking backward values first........
 For loop 1
 Bck val is global = i1
 Checking forward values now......
 Ptr is global: : a
 Checking Pointeess....
 Inside EqualDataFlowValuesForward...............................
 Value d1..........
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Value d2..........
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............(i1, ) 
 Value d2..........
 Inside printCurrLinLout............(i1, ) ======================================================================================
Context found!!!!!
LABEL: 2
Forward Inflow Value:- { (a, )->((c, ) , ) }Backward Inflow Value:- { i1,  }======================================================================================

===================================[BACKWARD-0 ]===========================================

Processing instruction at INDEX = 7
OUT: { i1,  }
 Inside CallOutflowFunction..............
 Printing values of a1
 Inside printCurrPinPout............{ (a, )->((c, ) , ) }
 Printing values of d1
 Inside printCurrLinLout............(i1, ) 
 Printing values of a3
 Inside printCurrPinPout............{ (i1, )->((c, ) , ) }
 Printing values of d3
 Inside printCurrLinLout............(a, ) 
 Inside getLocalComponentB.............
 Inside performMeetBackward...................IN: { a,  }
===================================[BACKWARD-0 ]===========================================

===================================[BACKWARD-0 ]===========================================

Processing instruction at INDEX = 6
OUT: { a,  }
 Inside computeInFromOut...................
 PRinting LOUT of the instr
 Inside printCurrLinLout............(a, ) 
 Fetched LHS: a lhs indir: 1
 Rhs in loop: <i, 1>IN: { i,  }
===================================[BACKWARD-0 ]===========================================

 Check if LIN of BB has changed.
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............(i, ) 
 Value d2..........
 Inside printCurrLinLout............(i, ) 
 Check if LOUT of BB has changed.
 Inside EqualDataFlowValuesBackward.................
 Value d1..........
 Inside printCurrLinLout............(call, ) 
 Value d2..........
 Inside printCurrLinLout............(call, ) 
 Printing Global Instruction List.....#
 Index: 1	 Lhs: <y, 1 > 		 Rhs: <a, 1>
 Index: 2	 Lhs: <i1, 1 > 		 Rhs: <y, 1>
 Index: 3 Rhs: <i1, 1>
 Index: 4	 Lhs: <x, 1 > 		 Rhs: <c, 0>
 Index: 5	 Lhs: <i, 1 > 		 Rhs: <x, 1>
 Index: 6	 Lhs: <a, 1 > 		 Rhs: <i, 1>
 Index: 7 Rhs: <fun, 1>
 Index: 8	 Lhs: <call, 1 > 		 Rhs: <i1, 1>
 Index: 9	 Lhs: <z, 1 > 		 Rhs: <call, 1>
 Index: 10 Rhs: <z, 1>

 Printing Modeled LLVM IR instructions...........#
  store i32* %a, i32** @y, align 8
  %i1 = load i32*, i32** @y, align 8
  ret i32* %i1
  store i32* %call, i32** @z, align 8
  ret i32 %i2
  store i32* %c, i32** @x, align 8
  %i = load i32*, i32** @x, align 8
  %call = call i32* @fun(i32* %i)
=================-------------------Statistics of Analysis-------------------=================
 Total number of Contexts: 3
 Total time taken in Splitting Basic Blocks: 0 seconds
 Total time taken in SLIM Modelling: 0 seconds
 Total time taken in Analysis: 0 seconds
 Total memory taken by Analysis: 131.433594 MB

------------------------------------------------------------------
---------------------------------------
 Context Label: 2
 Function Name: fun
 Forward size: 1
 Backward size: 1
---------------------------------------
---------------------------------------
 Context Label: 1
 Function Name: fun
 Forward size: 0
 Backward size: 1
---------------------------------------
---------------------------------------
 Context Label: 0
 Function Name: main
 Forward size: 0
 Backward size: 0
---------------------------------------
